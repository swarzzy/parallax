#version 330 core

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct Light {
	vec3 direction;
	vec3 position;
	float cutOff;
	float outerCutOff;
};

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;

out vec4 color;

uniform vec3 lightPos;
uniform vec3 viewPos;

uniform Material material;
uniform Light light;

	
void main(){
	
	vec3 lightDir = normalize(light.position - FragPos);
	float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = (light.cutOff - light.outerCutOff);
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
	vec3 ambient =  vec3(0.2f, 0.2f, 0.2f) * vec3(texture(material.diffuse, TexCoord));	
	
	vec3 norm = normalize(Normal);
	
	//vec3 lightDir = normalize(-light.direction);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = vec3(1.0f, 1.0f, 1.0f) * diff * vec3(texture(material.diffuse, TexCoord));
	
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir,reflectDir), 0.0), material.shininess);
	vec3 specular = vec3(1.0f, 1.0f, 1.0f) * spec * vec3(texture(material.specular, TexCoord));
	
	diffuse *= intensity;
	specular *= intensity;
	
	//color = texture(ourTexture1, TexCoord) * vec4((ambient + duffuse + specular), 1.0f);
	color =  vec4((ambient + diffuse + specular), 1.0f);
}